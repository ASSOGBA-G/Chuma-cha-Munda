to smart-transfer [biomass amount index index2]
  let idplays idplay
  set send_how_much amount
  let faim 0
  set send_to one-of (list "player 1" "player 2" "player 3" "player 4")
  if biomass = "labour" [set send_to one-of (list "player 1" "player 2" "player 3" "player 4" "off farm activities")]
  let rcpt send_to
  set diet "fed"
  liens "1" liens "2" liens "3" liens "4"
  let arret 0
  
  let biomsown 0;biomass own by sender
  let oldbiomass send_biomass
  set send_biomass biomass
  if biomass = "concentrate" [set send_biomass "conc"]
  if biomass = "small ruminant" [set send_biomass "srum"]
  if biomass = "water pump" [set send_biomass "water_pump"]
  
  let send_biomasse send_biomass
  
  if member? send_biomasse ["tractor" "rent tractor to"][set send_biomasse "tricycle"]
  
  ;;make sure there is enough resource to be sent
  if member? send_biomasse ["microfinance" "field" "shrubland-field" "forest-field"] = false[
    ifelse send_biomasse != "labour"[
      ifelse send_biomasse != "money"[
        ask farmers with [player = idplays][
          ifelse member? send_biomasse ["conc" "poultry" "manure" "fertilizer" "tricycle"] = false[
            set biomsown count out-link-neighbors with [typo = send_biomasse and [pcolor] of patch-here != white and hunger = faim]
          ][
            set biomsown count out-link-neighbors with [typo = send_biomasse] - 1
          ]
          
          if send_biomasse = "residue" [
            set biomsown count out-link-neighbors with [typo = send_biomasse and hidden? = true]
          ]; remove the fictive one
          
          if send_biomasse = "water_pump" [
            set biomsown count out-link-neighbors with [typo = send_biomasse]
          ]; remove the fictive one
          
        ]
      ][
        set biomsown item 0[onfarm_inc] of farmers with [player = idplays ] + item 0[offfarm_inc] of farmers with [player = idplays ]
      ]
    ][
      ask farmers with [player = idplays][
        set biomsown labour - ncow * 5 - ndonkey * 3 - ntricycle * 10
        
        ;; make sure the transfer does not happen if there is not enough off farm jobs
        if amount > gov_employment and rcpt = "off farm activities"[
          set biomsown 0
         set arret 1 
        ]
        
      ]
    ]
  ]
  
  if biomass = "field" [
    ask farmers with [player = idplays][
        set biomsown nplot
      ]
  ]
  
  
  if send_how_much > biomsown or member? biomass ["microfinance" "shrubland-field" "forest-field"] = true [
    ;;hubnet-send pseudo "warning" "Sender: you cannot send more resources than you own. Please try again" 
    set arret 1
    
    ;;update strategy based on actual transfer/selling/buying
    ask farmers with [player = idplays] [
      set activestrategy replace-item index activestrategy 0 
      set mystrategy replace-item index2 mystrategy activestrategy
    ]
  ]
  ;show (list biomass send_how_much biomsown)
  if arret = 0 [
    ;;biomass exchange
    smart-biomflow
    
    ask biom_owner [die]
    liens "1" liens "2" liens "3" liens "4"
    livupdate idplays
    livupdate send_to
    set flux fput send_how_much flux
    set flux fput send_biomasse flux
    set flux fput send_to flux
    set flux fput idplays flux
    set flux fput month flux
    set flux fput year flux
    set flux fput sim flux
    ;set flux (list flux idplays send_to send_biomasse send_how_much)
    file-open (word "resflux.txt")
    ;set flux fput month flux set flux fput year flux
    file-print flux
    file-close
    set flux []
    ;;hubnet-send pseudo "send_how_much" 0
    set send_biomass oldbiomass
  ]
  ask joueurs with [idplay = idplays][set send_how_much 0]
  update-labour
end


to smart-biomflow
  let idplays idplay
  let faim 0
  if diet != "fed" [set faim 1]
  let biom_out send_how_much
  let recpt send_to
  let rent 0
  
  if send_biomass = "concentrate" [set send_biomass "conc"]
  if send_biomass = "small ruminant" [set send_biomass "srum"]
  if send_biomass = "water pump" [set send_biomass "water_pump"]
  ;show send_biomass
  if member? send_biomass ["tractor" "rent tractor to"][
    if send_biomass = "rent tractor to" [
      set rent "yes" 
    ]
    set send_biomass "tricycle"
  ]
  
  let send_biomasse send_biomass
  
  ask farmers with [player = idplays][
    ifelse send_biomasse != "field" [
      ifelse send_biomasse != "labour"[
        ifelse recpt != "off farm activities"[
          ifelse send_biomasse != "money"[
            ifelse member? send_biomasse ["conc" "poultry" "manure" "fertilizer" "tricycle" "water_pump"] = false [
              let biomsown (count out-link-neighbors with [typo = send_biomasse and hidden? = true])
              ;show (list send_biomasse biom_out biomsown)
              ifelse send_biomasse != "residue"[
                ask n-of biom_out out-link-neighbors with [typo = send_biomasse and [pcolor] of patch-here != white and hunger = faim][
                  set farm item 0[farm] of farmers with [player = recpt]
                ]
              ][
                ask n-of biom_out out-link-neighbors with [typo = send_biomasse and hidden? = true][
                  set farm item 0[farm] of farmers with [player = recpt]
                ]
              ]
            ][
              let col white
              if send_biomasse = "poultry" [set col black]
              let biomsown (count out-link-neighbors with [typo = send_biomasse] - 1)
              ;show (list send_biomasse biom_out biomsown)
              ifelse send_biomasse != "poultry"[
              ask n-of biom_out out-link-neighbors with [typo = send_biomasse and [pcolor] of patch-here != col][
                set farm item 0[farm] of farmers with [player = recpt]
                
                if member? send_biomasse ["manure" "fertilizer"][
                  let myplot patches with [cultiv = "yes"]
                  set myplot myplot with [(substring plabel 0 1) = item 0 [farm] of farmers with [player = recpt]]
                  if any? myplot[
                    move-to one-of myplot
                  ]
                ]
                
                if send_biomasse = "tricycle" [
                  set farm item 0[farm] of farmers with [player = recpt]
                  if rent != "yes"[
                      set tractor_owner item 0[farm] of farmers with [player = recpt];;used to update ntricycle for both owner and the player renting the tractor.
                    ]
                  ]
                ]
              ][
                ask n-of biom_out out-link-neighbors with [typo = send_biomasse and [pcolor] of patch-here != col and energy != 99][
                  set farm item 0[farm] of farmers with [player = recpt]
                ]
              ]
              ;;update manure as its its update only after tick 0 
              if ticks = 0 [
                ask farmers with [player = recpt][
                  if send_biomasse = "manure" [set nmanure nmanure + biom_out]
                ]
                if send_biomasse = "manure" [set nmanure nmanure - biom_out]]
              
            ]
          ][
            ifelse  (onfarm_inc - biom_out) >= 0[
              set onfarm_inc onfarm_inc - biom_out]
            [set offfarm_inc offfarm_inc - biom_out + onfarm_inc set onfarm_inc 0]
            ask farmers with [player = recpt][set onfarm_inc onfarm_inc + biom_out]
          ]
        ][
          ;;hubnet-send pseudo "warning" "You can only send this resource to other players." 
          
        ]
      ][
        ifelse recpt != "off farm activities"[
          ask farmers with [player = recpt] [set labour_received labour_received + biom_out]
          set labour_sent labour_sent + biom_out
        ][
          set off_farm_labour off_farm_labour + biom_out
          set gov_employment gov_employment - biom_out
        ]
      ]
    ][
      ;;cultivplot of sender
      let myplot patches with [cultiv = "yes"]
      set myplot myplot with [(substring plabel 0 1) = item 0 [farm] of farmers with [player = idplays]]
      ;show (list count myplot biom_out)
      ;;cutivplot of receiver
      let dst item 0 [farm] of farmers with [player = recpt]
      
      if any? myplot[
        let npdst max [read-from-string substring plabel 2 3] of myplot ;;item 0 [nplot] of farmers with [player = recpt]
        let i 0
        while [i < biom_out and count myplot > 0]  [
          ask one-of myplot [
            let pl plabel 
            let sf samefield
            set plabel (word dst "-" (npdst + i + 1))
            ask patches with [plabel = pl and samefield = sf][
              set plabel (word dst "-" (npdst + i + 1))
            ]
          ]
          set myplot myplot with [(substring plabel 0 1) = item 0 [farm] of farmers with [player = idplays]]
          set i i + 1
          ;show (list count myplot biom_out i);consider count myplot / 3
        ]
      ]
    ]
  ]
end
